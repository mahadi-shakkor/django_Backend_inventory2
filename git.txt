Push Subsequent Changes: After making changes to your project, stage, commit, and push them to GitHub:

bash
Copy code
git add .
git commit -m "  "
git push origin main


---------------
after downlode grom github 
open in vs code then 

 python -m venv venv
  venv\Scripts\activate
   pip install django
    python.exe -m pip install --upgrade pip
     pip install django-widget-tweaks
      pip install mysqlclient
       python manage.py runserver
--------------------
add in models .py in user class
def check_password(self, raw_password):
    return self.password == raw_password

----
EXTRA THINGS
pip install djangorestframework
python manage.py makemigrations 
python manage.py migrate




---
make crude
app
 ====tempalte
        
 ====     

  python -m venv venv
  venv\Scripts\activate
  django-admin startproject crud
cd crud
   pip install django
    python.exe -m pip install --upgrade pip
     pip install django-widget-tweaks
      pip install mysqlclient
       python manage.py runserver  


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'invantory2',
        'USER': 'mahadi',
        'PASSWORD': '22322232',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


python manage.py makemigrations 
python manage.py migrate


python manage.py startapp appname

in setings.py   add appname

in main app urls.py a add koro

from django.urls.conf import include
path('',include("newAppName.urls"))

====
make model.py class in ur app

example :
from django.db import models

class Employee(models.Model):
    eid = models.CharField(max_length=20)
    ename = models.CharField(max_length=100)
    email = models.EmailField()
    econtact = models.CharField(max_length=15)

    def __str__(self):
        return "%s" % (self.ename)

    class Meta:
        db_table = "employee"


====
make forms.py

example:
from django import forms
from app1crud.models import Employee

class EmployeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = '__all__'

====
Creating view
now go views.py 
example:
from django.shortcuts import redirect, render
from employee.models import Employee
from employee.forms import EmployeeForm

def emp(request):
    if request.method == "POST":
        form = EmployeeForm(request.POST)
        if form.is_valid():
            try:
                form.save()
                return redirect("/show")
            except:
                pass
    else:
        form = EmployeeForm()
    
    return render(request, 'index.html', {'form': form})


def show(request):
    employees = Employee.objects.all()  # Corrected the query to retrieve all employees
    return render(request, 'show.html', {'employees': employees})  # Corrected the dictionary

def edit(request, id):
    employee = Employee.objects.get(id=id)  # Fixed the variable and method call for getting the employee by ID
    return render(request, 'edit.html', {'employee': employee})  # Corrected the variable name

def update(request, id):
    employee = Employee.objects.get(id=id)  # Fixed the variable and method call for getting the employee by ID
    form = EmployeeForm(request.POST, instance=employee)  # Corrected form initialization and assignment

    if form.is_valid():
        form.save()
        return redirect("/show")  # Redirect to the "show" page after successful update

    return render(request, 'edit.html', {'form': form, 'employee': employee})  # Render the form in case of errors or GET request



def destroy(request, id):
    employee = Employee.objects.get(id=id)  # Corrected the ID retrieval
    employee.delete()  # Deletes the employee
    return redirect("/show")  # Redirects to the "show" page after deletion

Creating view Done


====
Urls maping
make urls.py
example:

from django.contrib import admin
from django.urls import path
from employee import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('emp/', views.emp),
    path('show/', views.show),
    path('edit/<int:id>/', views.edit),
    path('update/<int:id>/', views.update),
    path('delete/<int:id>/', views.destroy),
]

=====
create templates:


3 html
 index.html
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form method="POST" action="/emp">
        {% csrf_token %}
        <div>
            <br>
            <h3>Enter Details</h3>
            <div>
                <p>Employee Id:</p> {{ form.eid }}  <!-- Correctly render the Employee Id field -->
            </div>
            <div>
                <p>Employee Name:</p> {{ form.ename }}  <!-- Example of adding another field -->
            </div>
            <div>
                <p>Email:</p> {{ form.email }}  <!-- Example of adding the email field -->
            </div>
            <div>
                <p>Contact:</p> {{ form.econtact }}  <!-- Example of adding the contact field -->
            </div>
            <div>
                <button type="submit">Submit</button>  <!-- Submit button -->
            </div>
        </div>
    </form>
    


    
</body>
</html>






-------------------------------------------------------

If you reopen your project the next day and want to continue working with Git, your local repository will still be linked to the remote repository you set up earlier. You just need to ensure you're in the correct directory and have Git properly configured. Here’s how to reconnect and continue working:

---

### **Steps to Reconnect Your Project to Git**

#### **1. Navigate to Your Project Directory**
Open your terminal and navigate to your project directory:

```bash
cd path/to/your/project
```

#### **2. Activate Your Virtual Environment**
If you’re using a virtual environment, activate it:

- On Windows:
  ```bash
  venv\Scripts\activate
  ```

- On macOS/Linux:
  ```bash
  source venv/bin/activate
  ```

#### **3. Check the Git Remote**
Verify that your project is still connected to the remote GitHub repository by running:

```bash
git remote -v
```

You should see something like this:

```
origin  https://github.com/username/repository.git (fetch)
origin  https://github.com/username/repository.git (push)
```

If it’s not connected, you can re-add the remote:

```bash
git remote add origin https://github.com/username/repository.git
```

---

### **4. Pull the Latest Changes (Optional)**
If someone else or you have made updates to the repository on GitHub, make sure your local repository is up-to-date by pulling the latest changes:

```bash
git pull origin main
```

Replace `main` with the branch name if you’re using a different branch.

---

### **5. Make Changes and Push to GitHub**
1. **Stage Your Changes**:
   After editing your project, stage the changes:
   ```bash
   git add .
   ```

2. **Commit Your Changes**:
   Commit the changes with a descriptive message:
   ```bash
   git commit -m "Description of changes"
   ```

3. **Push Your Changes to GitHub**:
   Push your committed changes to the remote repository:
   ```bash
   git push origin main
   ```

---

### **6. If You Are Starting Fresh (e.g., New Clone)**
If you’re starting fresh on a new machine or re-cloning the project:

1. Clone the repository from GitHub:
   ```bash
   git clone https://github.com/username/repository.git
   ```

2. Navigate to the project directory:
   ```bash
   cd repository
   ```

3. Activate your virtual environment and install dependencies:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Use venv\Scripts\activate on Windows
   pip install -r requirements.txt
   ```

---

### **Tips for Daily Workflow**
1. **Check Git Status**:
   Before making changes, check the status of your repository:
   ```bash
   git status
   ```

2. **Sync Changes Regularly**:
   Always pull (`git pull`) before starting new work and push (`git push`) after completing your updates.

3. **Use Branches for New Features**:
   If working on new features, create a new branch:
   ```bash
   git checkout -b feature_branch_name
   ```

   Once done, merge the branch back into the `main` branch.

---

Let me know if you need further assistance or clarification!